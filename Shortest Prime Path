https://practice.geeksforgeeks.org/problems/40c021237f84e4abd74e2025f06221fb4cf4cd85/1/?page=1&category[]=BFS&query=page1category[]BFS

class temp {
    int number;
    int ans;
}
class Solution{
    int solve(int Num1,int Num2){
        //code here
        boolean prime[] = new boolean [10000];
        for (int i=2;i<prime.length;i++) {
            prime[i]=true;
        }
        for (int i=2;i*i<=prime.length;i++) {
            if (prime[i]==true) {
                for (int j=2;i*j<prime.length;j++) {
                    prime[i*j]=false;
                }
            }
        }


        temp t= new temp();
        t.number = Num1;
        t.ans=0;

        Queue<temp> q = new LinkedList<>();

        q.add(t);

        boolean vi[]= new boolean [10000];
        vi[Num1]=true;

        while (q.size() != 0) {
            temp p = q.remove();
            int num = p.number;
            int ans = p.ans;

            if (num==Num2) {
                return ans;
            }

            for (int i=0;i<4;i++) {

                for(int j=0;j<=9;j++) {
                    int div = (int)Math.pow(10,i+1);
                    int beg = num/div;
                    beg = beg * div;
                    int mod = div/10;

                    if(i==3 && j==0){
                        continue;
                    }
                    beg = beg + (j*mod);
                    beg = beg+(num%mod);

                    if (vi[beg]==false && prime[beg]==true) {
                        vi[beg]=true;
                        temp next = new temp();
                        next.number = beg;
                        next.ans = ans+1;
                        q.add(next);
                    }
                }



            }
        }

        return -1;

    }
}
